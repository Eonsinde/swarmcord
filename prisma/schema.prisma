// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name String
  imageUrl String @db.String
  email String @db.String

  servers Server[]
  members Member[]
  channels Channel[]
  directMessages DirectMessage[]

  conversationsInitated Conversation[] @relation("ProfileOne")
  conversationsReceived Conversation[] @relation("ProfileTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  servers Server[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String?
  imageUrl String? @db.String
  coverUrl String? @db.String
  inviteCode String @unique

  creatorId String @db.ObjectId
  creator Profile @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  categoryId String @db.ObjectId
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])

  @@unique([profileId, serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  creatorId String @db.ObjectId
  creator Profile @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
  @@index([serverId])
}

model Message {
  id String @id @default(uuid()) @map("_id") @db.ObjectId
  content String @db.String

  fileUrl String? @db.String

  memberId String @db.ObjectId
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String @db.ObjectId
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid()) @map("_id") @db.ObjectId

  profileOneId String @db.ObjectId
  profileOne Profile @relation("ProfileOne", fields: [profileOneId], references: [id], onDelete: Cascade)

  profileTwoId String @db.ObjectId
  profileTwo Profile @relation("ProfileTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileOneId])
  @@index([profileTwoId])

  @@unique([profileOneId, profileTwoId])
}

model DirectMessage {
  id String @id @default(uuid()) @map("_id") @db.ObjectId
  content String @db.String

  fileUrl String? @db.String

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([profileId])
}

